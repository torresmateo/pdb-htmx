package components

import "mateo/pdb/cmd/models"

var mainTitle string = "PIONEER case studies"

templ head(title string, hook templ.Component) {
	<head>
		<title>{ title }</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
		//<link rel="icon" type="image/svg+xml" href="{{ static('images/favicon.svg') }}">
		<link rel="stylesheet" type="text/css" href="/css/output.css"/>
		<script src="/js/htmx.min.js"></script>
		<script defer src="/js/alpine.min.js"></script>
		@hook
	</head>
}

templ nav(showInteractionButton bool) {
	<header class="bg-white">
		<nav class="flex items-center justify-between p-6 lg:px-8" aria-label="Global">
			<div class="flex lg:flex-1">
				<a href="#" class="-m-1.5 p-1.5">
					<span class="sr-only">Home</span>
					<img class="h-8 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt=""/>
				</a>
			</div>
			<div class="flex lg:hidden">
				<button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
					<span class="sr-only">Open main menu</span>
					<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
						<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
					</svg>
				</button>
			</div>
			<div class="hidden lg:flex lg:gap-x-12">
				<a href="/" class="text-sm font-semibold leading-6 text-gray-900">Home</a>
				<a href="/about/" class="text-sm font-semibold leading-6 text-gray-900">About</a>
			</div>
			<div class="hidden lg:flex lg:flex-1 lg:justify-end">
				if showInteractionButton {
					<button
						x-data
						class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
						@click="() => {$store.interactions.open = true; console.log('asd');}"
					>
						Show interaction list
					</button>
				}
			</div>
		</nav>
		<!-- Mobile menu, show/hide based on menu open state. -->
		<div class="lg:hidden" role="dialog" aria-modal="true">
			<!-- Background backdrop, show/hide based on slide-over state. -->
			<div class="fixed inset-0 z-10"></div>
			<div class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
				<div class="flex items-center justify-between">
					<a href="#" class="-m-1.5 p-1.5">
						<span class="sr-only">Your Company</span>
						<img class="h-8 w-auto" src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt=""/>
					</a>
					<button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700">
						<span class="sr-only">Close menu</span>
						<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
				<div class="mt-6 flow-root">
					<div class="-my-6 divide-y divide-gray-500/10">
						<div class="space-y-2 py-6">
							<a href="/" class="-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50">Home</a>
							<a href="/about/" class="-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50">About</a>
						</div>
						<div class="py-6">
							<a href="#" class="-mx-3 block rounded-lg px-3 py-2.5 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50">Log in</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</header>
}

templ header(showInteractionButton bool) {
	@nav(showInteractionButton)
}

templ footer() {
	<div>Footer</div>
}

templ scripts() {
	<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store("interactions",{open:false});
    });
    </script>
	{ children... }
}

type BaseConfig struct {
	head templ.Component
}

templ base(config BaseConfig) {
	<!DOCTYPE html>
	<html lang="en" class="h-full">
		@head(mainTitle, config.head)
		<body class="h-full">
			{ children... }
			@scripts()
		</body>
	</html>
}

templ singleColumn(config BaseConfig) {
	@base(config) {
		{ children... }
	}
}

templ sidebar(config BaseConfig, side templ.Component, side_title string) {
	@base(config) {
		<div class="h-full flex flex-col">
			{ children... }
		</div>
		<div
			x-data
			class="relative transition-opacity ease-in-out duration-500"
			:class="{'invisible': !$store.interactions.open}"
			aria-labelledby="slide-over-title"
			role="dialog"
			aria-modal="true"
		>
			<!--
            Background backdrop, show/hide based on slide-over state.

            Entering: "ease-in-out duration-500"
            From: "opacity-0"
            To: "opacity-100"
            Leaving: "ease-in-out duration-500"
            From: "opacity-100"
            To: "opacity-0"
            -->
			<div
				class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity ease-in-out duration-500"
				:class="$store.interactions.open ? 'opacity-100 block' : 'opacity-0'"
				aria-hidden="true"
			></div>
			<div class="fixed inset-0 overflow-hidden">
				<div class="absolute inset-0 overflow-hidden">
					<div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
						<!--
                        Slide-over panel, show/hide based on slide-over state.

                        Entering: "transform transition ease-in-out duration-500 sm:duration-700"
                        From: "translate-x-full"
                        To: "translate-x-0"
                        Leaving: "transform transition ease-in-out duration-500 sm:duration-700"
                        From: "translate-x-0"
                        To: "translate-x-full"
                        -->
						<div
							class="pointer-events-auto w-screen max-w-md transform transition ease-in-out duration-500 sm:duration-700"
							:class="$store.interactions.open ? 'translate-x-0' : 'translate-x-full'"
						>
							<div class="flex h-full flex-col overflow-y-scroll bg-white py-6 shadow-xl">
								<div class="px-4 sm:px-6">
									<div class="flex items-start justify-between">
										<h2 class="text-base font-semibold leading-6 text-gray-900" id="slide-over-title">{ side_title }</h2>
										<div class="ml-3 flex h-7 items-center">
											<button
												type="button"
												class="relative rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
												@click="$store.interactions.open = ! $store.interactions.open"
											>
												<span class="absolute -inset-2.5"></span>
												<span class="sr-only">Close panel</span>
												<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
													<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
												</svg>
											</button>
										</div>
									</div>
								</div>
								<div class="relative mt-6 flex-1 px-4 sm:px-6 overflow-y-auto">
									@side
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ interactionTablePdbRow(i *models.Interaction, p *models.Pdb, active bool) {
	<tr>
		if active {
			<td class="whitespace-nowrap px-2 py-2 text-sm text-white bg-teal-600"></td>
			<td colspan="2" class="whitespace-nowrap px-2 py-2 text-sm text-white bg-teal-600">{ p.PdbId }</td>
			<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0 bg-teal-600">
				<a href={ p.PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View<span class="sr-only">PDB</span></a>
			</td>
		} else {
			<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900 bg-gray-50"></td>
			<td colspan="2" class="whitespace-nowrap px-2 py-2 text-sm text-gray-900 bg-gray-50">{ p.PdbId }</td>
			<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0 bg-gray-50">
				<a href={ p.PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View<span class="sr-only">PDB</span></a>
			</td>
		}
	</tr>
}

templ interactionRow(i *models.Interaction, active bool, active_pdb *models.Pdb) {
	<tr>
		if len(i.Pdbs) > 2 {
			if active {
				<td id="active-interaction" class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.P1 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.P2 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.AssociatedPdbs() }</td>
				<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0 bg-green-600">
					<a href={ i.URL() } class="text-indigo-600 hover:text-indigo-900">View<span class="sr-only">{ i.P1 } - { i.P2 }</span></a>
				</td>
			} else {
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ i.P1 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ i.P2 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">{ i.AssociatedPdbs() }</td>
				<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
					<a href={ i.URL() } class="text-indigo-600 hover:text-indigo-900">View<span class="sr-only">{ i.P1 } - { i.P2 }</span></a>
				</td>
			}
		} else {
			// display only version with the pdb
			if active {
				<td id="active-interaction" class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.P1 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.P2 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-white bg-green-600">{ i.Pdbs[0].PdbId }</td>
				<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0 bg-green-600">
					<a href={ i.Pdbs[0].PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View PDB</a>
				</td>
			} else {
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ i.P1 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ i.P2 }</td>
				<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-500">{ i.Pdbs[0].PdbId }</td>
				<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
					<a href={ i.Pdbs[0].PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View PDB</a>
				</td>
			}
		}
	</tr>
	if len(i.Pdbs) > 2 {
		for _, pdb := range i.UniquePdbs() {
			@interactionTablePdbRow(i, pdb, active_pdb != nil && active && pdb.PdbId == active_pdb.PdbId)
		}
	}
}

templ interactionList(
	interactions []*models.Interaction,
	active_interaction *models.Interaction,
	active_pdb *models.Pdb,
) {
	if active_interaction != nil {
		<script>
            document.addEventListener("DOMContentLoaded", function() {
                var active_row = document.getElementById("active-interaction").scrollIntoView();
            });    
        </script>
	}
	<div class="px-4 sm:px-6 lg:px-8">
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h1 class="text-base font-semibold leading-6 text-gray-900">Interactions</h1>
				<p class="mt-2 text-sm text-gray-700">A table of placeholder stock market data that does not make any sense.</p>
			</div>
		</div>
		<div class="mt-8 flow-root">
			<div class="-mx-4 -my-2 overflow-x-auto flex flex-col sm:-mx-6 lg:-mx-8">
				<div class="min-w-70 py-2 align-middle sm:px-6 lg:px-8 flex-auto overflow-y-scroll">
					<table class="min-w-full divide-y divide-gray-300">
						<thead>
							<tr>
								<th scope="col" class="whitespace-nowrap py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">Interactor 1</th>
								<th scope="col" class="whitespace-nowrap px-2 py-3.5 text-left text-sm font-semibold text-gray-900">Interactor 2</th>
								<th scope="col" class="whitespace-nowrap px-2 py-3.5 text-left text-sm font-semibold text-gray-900">PDBs</th>
								<th scope="col" class="relative whitespace-nowrap py-3.5 pl-3 pr-4 sm:pr-0">
									<span class="sr-only">View</span>
								</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-200 bg-white">
							for _, i := range interactions {
								if active_interaction != nil && i == active_interaction {
									@interactionRow(i, true, active_pdb)
								} else {
									@interactionRow(i, false, active_pdb)
								}
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
}

templ pdbList(i *models.Interaction) {
	<div class="mt-8 flow-root">
		<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
			<div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
				<table class="min-w-full divide-y divide-gray-300">
					<thead>
						<tr>
							<th scope="col" class="whitespace-nowrap py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-0">PDB ID</th>
							<th scope="col" class="whitespace-nowrap px-2 py-3.5 text-left text-sm font-semibold text-gray-900">Aligned interactor</th>
							<th scope="col" class="relative whitespace-nowrap py-3.5 pl-3 pr-4 sm:pr-0">
								<span class="sr-only">View</span>
							</th>
							<th scope="col" class="relative whitespace-nowrap py-3.5 pl-3 pr-4 sm:pr-0">
								<span class="sr-only">View Pair</span>
							</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200 bg-white">
						for _, pdb := range i.Pdbs {
							<tr>
								<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ pdb.PdbId }</td>
								<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">{ pdb.AlignedProtein }</td>
								<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
									<a href={ pdb.URL(i) } class="text-indigo-600 hover:text-indigo-900">View<span class="sr-only">{ i.P1 } - { i.P2 }</span></a>
								</td>
								<td class="relative whitespace-nowrap py-2 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
									<a href={ pdb.PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View Pair<span class="sr-only">{ i.P1 } - { i.P2 }</span></a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

templ home(interactions []*models.Interaction) {
	@header(false)
	@interactionList(interactions, nil, nil)
}

templ about() {
	@header(false)
	<h1>
		PDB viewer
	</h1>
	<p>This is a simple web tool that allows the visualization of interactions from AlphaFold3 and PIONEER2.0.</p>
	<p>Intended mainly as an internal tool, I published this in order to have an interactive place to show our case studies for closer ispection.</p>
}

templ interaction(i *models.Interaction) {
	@header(true)
	<div class="px-4 sm:px-6 lg:px-8">
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h1 class="text-base font-semibold leading-6 text-gray-900">Interaction: { i.P1 } - { i.P2 }</h1>
				<p class="mt-2 text-sm text-gray-700">This table shows all of the co-complexes for this interaction. For all cases where there are predictions from either model, we align the AF3 predicted structure with the PDB using a single chain as reference, that's the "aligned interactor" column below.</p>
			</div>
		</div>
		@pdbList(i)
	</div>
}

templ pdbPairIncludes() {
	<script src="https://unpkg.com/ngl@2.3.1/dist/ngl.js"></script>
	<script src="/js/pioneer.js"></script>
	<script>
    document.addEventListener("DOMContentLoaded", async function() {
        var pdb_display_a = await PdbDisplay.init("viewport-a", true);
        var pdb_display_b = await PdbDisplay.init("viewport-b", true);
    });    
    </script>
}

templ pdbIncludes() {
	<script src="https://unpkg.com/ngl@2.3.1/dist/ngl.js"></script>
	<script src="/js/pioneer.js"></script>
	<script>
    document.addEventListener("DOMContentLoaded", async function() {
        var pdb_display = await PdbDisplay.init("viewport", true);
    });    
    </script>
}

templ pdbPresentationIncludes() {
	<script src="https://unpkg.com/ngl@2.3.1/dist/ngl.js"></script>
	<script src="/js/pioneer.js"></script>
	<script>
    document.addEventListener("DOMContentLoaded", async function() {
        var pdb_display_a = await PdbDisplay.init("viewport-a", true);
        var pdb_display_b = await PdbDisplay.init("viewport-b", true);
        var pdb_display_c = await PdbDisplay.init("viewport-c", true);
        var pdb_display_d = await PdbDisplay.init("viewport-d", true);
        pdb_display_a.addMirror(pdb_display_b);
        pdb_display_a.addMirror(pdb_display_c);
        pdb_display_a.addMirror(pdb_display_d);

        pdb_display_b.addMirror(pdb_display_a);
        pdb_display_b.addMirror(pdb_display_c);
        pdb_display_b.addMirror(pdb_display_d);

        pdb_display_c.addMirror(pdb_display_a);
        pdb_display_c.addMirror(pdb_display_b);
        pdb_display_c.addMirror(pdb_display_d);

        pdb_display_d.addMirror(pdb_display_a);
        pdb_display_d.addMirror(pdb_display_b);
        pdb_display_d.addMirror(pdb_display_c);
        

        const all_images_btn = document.getElementById("get-all-images");
        all_images_btn.addEventListener("click", () => {
            pdb_display_a.createFile();
            pdb_display_b.createFile();
            pdb_display_c.createFile();
            pdb_display_d.createFile();
        });
    });    
    </script>
}

templ pdbToggle(id, label, description string, checked bool) {
	<div class="relative flex items-start">
		<div class="flex h-6 items-center">
			<input
				id={ id }
				aria-describedby="comments-description"
				type="checkbox"
				checked?={ checked }
				class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600
                       disabled:opacity-50 disabled:pointer-events-none"
			/>
		</div>
		<div class="ml-3 text-sm leading-6">
			<label for={ id } class="font-medium text-gray-900">{ label }</label>
			if description != "" {
				<span id={ id + "-description" } class="text-gray-500">
					{ description }
				</span>
			}
		</div>
	</div>
}

templ pdbViewportControls(viewport_id string, display_config PdbDisplayConfig) {
	<div class="ml-6 flow-root">
		<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
			<div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
				<table class="min-w-full divide-y divide-red-700">
					<tbody class="divide-y divide-gray-400 bg-white">
						<tr class="divide-x divide-gray-400">
							<td colspan="2" class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-af3", "AF3 structure", "", display_config.ShowAF3)
							</td>
							<td colspan="2" class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-real", "PDB structure", "", display_config.ShowReal)
							</td>
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								<button
									id={ viewport_id + "-make-image" }
									type="button"
									class="-ml-px rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
								>
									Save Image
								</button>
							</td>
						</tr>
						<tr class="divide-x divide-gray-400">
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-af3-pred-af3", "AF3", "", display_config.ShowAnnotAF3)
							</td>
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-af3-pred-pio", "PIONEER2.0", "", display_config.ShowAnnotPIO)
							</td>
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-real-pred-af3", "AF3", "", display_config.ShowPredAF3)
							</td>
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								@pdbToggle(viewport_id+"-toggle-struct-real-pred-pio", "PIONEER2.0", "", display_config.ShowPredPIO)
							</td>
							<td class="whitespace-nowrap px-2 py-2 text-sm text-gray-900">
								<button
									id={ viewport_id + "-set-mirrors" }
									type="button"
									class="-ml-px rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
								>
									Set Mirrors
								</button>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

templ pdbViewport(i *models.Interaction, pdb *models.Pdb, viewport_id string, link bool, display_config PdbDisplayConfig) {
	<div class="flex px-6 items-center text-align-center">
		<p>
			Aligned to { pdb.AlignedProtein }
			if link {
				| <a href={ pdb.URL(i) } class="text-indigo-600 hover:text-indigo-900">View alignment</a>
				| <a href={ pdb.PairURL(i) } class="text-indigo-600 hover:text-indigo-900">View Pair</a>
				| <a href={ pdb.PresentationURL(i) } class="text-indigo-600 hover:text-indigo-900">View Presentation mode</a>
			}
		</p>
	</div>
	@pdbViewportControls(viewport_id, display_config)
	@pdbDisplayScript(i, pdb, viewport_id+"-info", display_config)
	<div
		id={ viewport_id }
		class="w-full h-[calc(77%)] p-6"
	></div>
	@pdbBadges()
}

templ pdbBadges() {
	<div class="flex mx-6">
		<span class="inline-flex items-center gap-x-1.5 rounded-md px-2 py-1 font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
			<svg class="h-2 w-2" style="fill: #F8981D;" viewBox="0 0 6 6" aria-hidden="true">
				<circle cx="3" cy="3" r="3"></circle>
			</svg>
			Target
		</span>
		<span class="inline-flex items-center gap-x-1.5 rounded-md px-2 py-1 font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
			<svg class="h-2 w-2" style="fill: #006699;" viewBox="0 0 6 6" aria-hidden="true">
				<circle cx="3" cy="3" r="3"></circle>
			</svg>
			Partner
		</span>
		<span class="inline-flex items-center gap-x-1.5 rounded-md px-2 py-1 font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
			<svg class="h-2 w-2" style="fill: #6EB43F;" viewBox="0 0 6 6" aria-hidden="true">
				<circle cx="3" cy="3" r="3"></circle>
			</svg>
			Target AF3
		</span>
		<span class="inline-flex items-center gap-x-1.5 rounded-md px-2 py-1 font-medium text-gray-900 ring-1 ring-inset ring-gray-200">
			<svg class="h-2 w-2" style="fill: #EF4035;" viewBox="0 0 6 6" aria-hidden="true">
				<circle cx="3" cy="3" r="3"></circle>
			</svg>
			Partner AF3
		</span>
	</div>
}

templ pdbDisplay(i *models.Interaction, pdb *models.Pdb) {
	@header(true)
	<div class="px-4 sm:px-6 lg:px-8">
		<div class="flex flex-col">
			<h1 class="text-base font-semibold leading-6 text-gray-900">Interaction: { i.P1 } - { i.P2 } - { pdb.PdbId } - <a href={ templ.SafeURL("https://www.rcsb.org/3d-view/" + pdb.PdbId) } class="text-indigo-600 hover:text-indigo-900">View PDB</a></h1>
			<div class="w-full flex-1 h-[calc(100dvh)]">
				@pdbViewport(i, pdb, "viewport", true, newPdbDisplayConfig())
			</div>
		</div>
	</div>
}

templ pdbPresentationDisplay(i *models.Interaction, pdb *models.Pdb) {
	@header(true)
	<div class="px-4 sm:px-6 lg:px-8">
		<h1 class="text-base font-semibold leading-6 text-gray-900">Interaction: { i.P1 } - { i.P2 } - { pdb.PdbId } - <a href={ templ.SafeURL("https://www.rcsb.org/3d-view/" + pdb.PdbId) } class="text-indigo-600 hover:text-indigo-900">View PDB</a></h1>
		<button
			id="get-all-images"
			type="button"
			class="-ml-px rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10"
		>
			Save All images
		</button>
		<div class="flex">
			<div class="w-1/2 flex-1 flex flex-col">
				<div class="w-full h-[calc(45dvh)] flex-1">
					@pdbViewport(i, pdb, "viewport-a", false, PdbDisplayConfig{ShowReal: true})
				</div>
				<div class="w-full h-[calc(45dvh)] flex-auto">
					@pdbViewport(i, pdb, "viewport-b", false, PdbDisplayConfig{ShowReal: true, ShowAF3: true})
				</div>
			</div>
			<div class="w-1/2 flex-1 flex flex-col">
				<div class="w-full h-[calc(45dvh)] flex-1">
					@pdbViewport(i, pdb, "viewport-c", false, PdbDisplayConfig{ShowReal: true, ShowPredPIO: true})
				</div>
				<div class="w-full h-[calc(45dvh)] flex-auto">
					@pdbViewport(i, pdb, "viewport-d", false, PdbDisplayConfig{ShowReal: true, ShowPredAF3: true})
				</div>
			</div>
		</div>
	</div>
}

templ pdbPairDisplay(i *models.Interaction, pdb_a, pdb_b *models.Pdb) {
	@header(true)
	<div class="px-4 sm:px-6 lg:px-8 flex-1 h-full">
		<h1 class="text-base font-semibold leading-6 text-gray-900">Interaction: { i.P1 } - { i.P2 } - { pdb_a.PdbId } - <a href={ templ.SafeURL("https://www.rcsb.org/3d-view/" + pdb_a.PdbId) } class="text-indigo-600 hover:text-indigo-900">View PDB</a></h1>
		<div class="flex flex-row">
			<div class="w-1/2 flex-1 h-[calc(100dvh)]">
				@pdbViewport(i, pdb_a, "viewport-a", true, newPdbDisplayConfig())
			</div>
			<div class="w-1/2 flex-1 h-[calc(100dvh)]">
				@pdbViewport(i, pdb_b, "viewport-b", true, newPdbDisplayConfig())
			</div>
		</div>
	</div>
}

type PdbDisplayConfig struct {
	ShowReal     bool
	ShowAF3      bool
	ShowPredPIO  bool
	ShowPredAF3  bool
	ShowAnnotPIO bool
	ShowAnnotAF3 bool
}

func newPdbDisplayConfig() PdbDisplayConfig {
	return PdbDisplayConfig{
		ShowReal:     true,
		ShowAF3:      true,
		ShowPredPIO:  false,
		ShowPredAF3:  false,
		ShowAnnotPIO: false,
		ShowAnnotAF3: false,
	}
}

templ pdbDisplayScript(i *models.Interaction, pdb *models.Pdb, divid string, display_config PdbDisplayConfig) {
	<div
		id={ divid }
		class="hidden"
		data-filename={ templ.JSONString(pdb.Filename) }
		data-metadata={ templ.JSONString(pdb.MetadataFilename(i)) }
		data-display={ templ.JSONString(display_config) }
	></div>
}

func emptyBaseConfig() BaseConfig {
	return BaseConfig{
		head: templ.NopComponent,
	}
}

func pdbBaseConfig() BaseConfig {
	return BaseConfig{
		head: pdbIncludes(),
	}
}

func pdbPresentationBaseConfig() BaseConfig {
	return BaseConfig{
		head: pdbPresentationIncludes(),
	}
}

func pdbPairBaseConfig() BaseConfig {
	return BaseConfig{
		head: pdbPairIncludes(),
	}
}

// public components
templ Home(interactions []*models.Interaction) {
	@singleColumn(emptyBaseConfig()) {
		@home(interactions)
	}
}

templ About() {
	@singleColumn(emptyBaseConfig()) {
		@about()
	}
}

templ exampleSide(
	interactions []*models.Interaction,
	active_interaction *models.Interaction,
	active_pdb *models.Pdb,
) {
	@interactionList(interactions, active_interaction, active_pdb)
}

templ Interaction(i *models.Interaction, interactions []*models.Interaction) {
	@sidebar(emptyBaseConfig(), exampleSide(interactions, i, nil), "Interactions") {
		@interaction(i)
	}
}

templ Pdb(i *models.Interaction, pdb *models.Pdb, interactions []*models.Interaction) {
	@sidebar(pdbBaseConfig(), exampleSide(interactions, i, pdb), "Interactions") {
		@pdbDisplay(i, pdb)
	}
}

templ PdbPresentation(i *models.Interaction, pdb *models.Pdb, interactions []*models.Interaction) {
	@sidebar(pdbPresentationBaseConfig(), exampleSide(interactions, i, pdb), "Interactions") {
		@pdbPresentationDisplay(i, pdb)
	}
}

templ PdbPair(i *models.Interaction, pdb_a, pdb_b *models.Pdb, interactions []*models.Interaction) {
	@sidebar(pdbPairBaseConfig(), exampleSide(interactions, i, pdb_a), "Interactions") {
		@pdbPairDisplay(i, pdb_a, pdb_b)
	}
}
